/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  containsBytes,
  fixEncoderSize,
  getBytesEncoder,
  type Address,
  type ReadonlyUint8Array,
} from 'gill';
import {
  type ParsedIncrementInstruction,
  type ParsedInitializeInstruction,
} from '../instructions';

export const BASIC_COUNTER_PROGRAM_ADDRESS =
  'FfCxv78MgdXf9TvFzFVwXVuuYCqWUdFgAMdAnY97q5A8' as Address<'FfCxv78MgdXf9TvFzFVwXVuuYCqWUdFgAMdAnY97q5A8'>;

export enum BasicCounterAccount {
  Counter,
}

export function identifyBasicCounterAccount(
  account: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): BasicCounterAccount {
  const data = 'data' in account ? account.data : account;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([255, 176, 4, 245, 188, 253, 124, 25])
      ),
      0
    )
  ) {
    return BasicCounterAccount.Counter;
  }
  throw new Error(
    'The provided account could not be identified as a basicCounter account.'
  );
}

export enum BasicCounterInstruction {
  Increment,
  Initialize,
}

export function identifyBasicCounterInstruction(
  instruction: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): BasicCounterInstruction {
  const data = 'data' in instruction ? instruction.data : instruction;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([11, 18, 104, 9, 104, 174, 59, 33])
      ),
      0
    )
  ) {
    return BasicCounterInstruction.Increment;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([175, 175, 109, 31, 13, 152, 155, 237])
      ),
      0
    )
  ) {
    return BasicCounterInstruction.Initialize;
  }
  throw new Error(
    'The provided instruction could not be identified as a basicCounter instruction.'
  );
}

export type ParsedBasicCounterInstruction<
  TProgram extends string = 'FfCxv78MgdXf9TvFzFVwXVuuYCqWUdFgAMdAnY97q5A8',
> =
  | ({
      instructionType: BasicCounterInstruction.Increment;
    } & ParsedIncrementInstruction<TProgram>)
  | ({
      instructionType: BasicCounterInstruction.Initialize;
    } & ParsedInitializeInstruction<TProgram>);
