/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  isProgramError,
  type Address,
  type SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM,
  type SolanaError,
} from 'gill';
import { BASIC_COUNTER_PROGRAM_ADDRESS } from '../programs';

/** CannotGetBump: Cannot get the bump. */
export const BASIC_COUNTER_ERROR__CANNOT_GET_BUMP = 0x1770; // 6000
/** InvalidAmount: The amount must be between 1 and 100. */
export const BASIC_COUNTER_ERROR__INVALID_AMOUNT = 0x1771; // 6001

export type BasicCounterError =
  | typeof BASIC_COUNTER_ERROR__CANNOT_GET_BUMP
  | typeof BASIC_COUNTER_ERROR__INVALID_AMOUNT;

let basicCounterErrorMessages: Record<BasicCounterError, string> | undefined;
if (process.env.NODE_ENV !== 'production') {
  basicCounterErrorMessages = {
    [BASIC_COUNTER_ERROR__CANNOT_GET_BUMP]: `Cannot get the bump.`,
    [BASIC_COUNTER_ERROR__INVALID_AMOUNT]: `The amount must be between 1 and 100.`,
  };
}

export function getBasicCounterErrorMessage(code: BasicCounterError): string {
  if (process.env.NODE_ENV !== 'production') {
    return (basicCounterErrorMessages as Record<BasicCounterError, string>)[
      code
    ];
  }

  return 'Error message not available in production bundles.';
}

export function isBasicCounterError<
  TProgramErrorCode extends BasicCounterError,
>(
  error: unknown,
  transactionMessage: {
    instructions: Record<number, { programAddress: Address }>;
  },
  code?: TProgramErrorCode
): error is SolanaError<typeof SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM> &
  Readonly<{ context: Readonly<{ code: TProgramErrorCode }> }> {
  return isProgramError<TProgramErrorCode>(
    error,
    transactionMessage,
    BASIC_COUNTER_PROGRAM_ADDRESS,
    code
  );
}
