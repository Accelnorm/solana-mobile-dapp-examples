/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type AccountMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyUint8Array,
  type WritableAccount,
} from 'gill';
import { BASIC_COUNTER_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const INCREMENT_DISCRIMINATOR = new Uint8Array([
  11, 18, 104, 9, 104, 174, 59, 33,
]);

export function getIncrementDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(INCREMENT_DISCRIMINATOR);
}

export type IncrementInstruction<
  TProgram extends string = typeof BASIC_COUNTER_PROGRAM_ADDRESS,
  TAccountCounter extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountCounter extends string
        ? WritableAccount<TAccountCounter>
        : TAccountCounter,
      ...TRemainingAccounts,
    ]
  >;

export type IncrementInstructionData = {
  discriminator: ReadonlyUint8Array;
  amount: bigint;
};

export type IncrementInstructionDataArgs = { amount: number | bigint };

export function getIncrementInstructionDataEncoder(): FixedSizeEncoder<IncrementInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['amount', getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: INCREMENT_DISCRIMINATOR })
  );
}

export function getIncrementInstructionDataDecoder(): FixedSizeDecoder<IncrementInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['amount', getU64Decoder()],
  ]);
}

export function getIncrementInstructionDataCodec(): FixedSizeCodec<
  IncrementInstructionDataArgs,
  IncrementInstructionData
> {
  return combineCodec(
    getIncrementInstructionDataEncoder(),
    getIncrementInstructionDataDecoder()
  );
}

export type IncrementAsyncInput<TAccountCounter extends string = string> = {
  counter?: Address<TAccountCounter>;
  amount: IncrementInstructionDataArgs['amount'];
};

export async function getIncrementInstructionAsync<
  TAccountCounter extends string,
  TProgramAddress extends Address = typeof BASIC_COUNTER_PROGRAM_ADDRESS,
>(
  input: IncrementAsyncInput<TAccountCounter>,
  config?: { programAddress?: TProgramAddress }
): Promise<IncrementInstruction<TProgramAddress, TAccountCounter>> {
  // Program address.
  const programAddress =
    config?.programAddress ?? BASIC_COUNTER_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    counter: { value: input.counter ?? null, isWritable: true },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.counter.value) {
    accounts.counter.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([99, 111, 117, 110, 116, 101, 114])
        ),
      ],
    });
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [getAccountMeta(accounts.counter)],
    programAddress,
    data: getIncrementInstructionDataEncoder().encode(
      args as IncrementInstructionDataArgs
    ),
  } as IncrementInstruction<TProgramAddress, TAccountCounter>;

  return instruction;
}

export type IncrementInput<TAccountCounter extends string = string> = {
  counter: Address<TAccountCounter>;
  amount: IncrementInstructionDataArgs['amount'];
};

export function getIncrementInstruction<
  TAccountCounter extends string,
  TProgramAddress extends Address = typeof BASIC_COUNTER_PROGRAM_ADDRESS,
>(
  input: IncrementInput<TAccountCounter>,
  config?: { programAddress?: TProgramAddress }
): IncrementInstruction<TProgramAddress, TAccountCounter> {
  // Program address.
  const programAddress =
    config?.programAddress ?? BASIC_COUNTER_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    counter: { value: input.counter ?? null, isWritable: true },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [getAccountMeta(accounts.counter)],
    programAddress,
    data: getIncrementInstructionDataEncoder().encode(
      args as IncrementInstructionDataArgs
    ),
  } as IncrementInstruction<TProgramAddress, TAccountCounter>;

  return instruction;
}

export type ParsedIncrementInstruction<
  TProgram extends string = typeof BASIC_COUNTER_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    counter: TAccountMetas[0];
  };
  data: IncrementInstructionData;
};

export function parseIncrementInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedIncrementInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 1) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      counter: getNextAccount(),
    },
    data: getIncrementInstructionDataDecoder().decode(instruction.data),
  };
}
